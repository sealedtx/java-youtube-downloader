package com.github.kiulian.downloader;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;

import com.github.kiulian.downloader.downloader.request.RequestPlaylistInfo;
import com.github.kiulian.downloader.downloader.response.Response;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import com.github.kiulian.downloader.model.playlist.PlaylistDetails;
import com.github.kiulian.downloader.model.playlist.PlaylistVideoDetails;
import com.github.kiulian.downloader.model.playlist.PlaylistInfo;

@DisplayName("Tests extracting metadata from youtube playlists")
public class YoutubePlaylistExtractor_Tests extends YoutubePlaylistTest {

    @Test
    @DisplayName("get playlist without author should be successful")
    void getPlaylistWithoutAuthor_Success() {
        assertDoesNotThrow(() -> {
            PlaylistInfo playlist = getPlaylist(AUTOGENERATED_PLAYLIST_ID);
            assertNull(playlist.details().author(), "playlist author should be null");
        });
    }

    @Test
    @DisplayName("getShortPlaylist should be successful")
    void getShortPlaylist_Success() {
        assertDoesNotThrow(() -> {
            PlaylistInfo playlist = getPlaylist(ASK_NASA_PLAYLIST_ID);
            testPlaylist(playlist, ASK_NASA_PLAYLIST_ID, "#AskNASA", "NASA", 22);
            testVideo(getVideo(playlist, "t2AgFb4jL1M", 1),
                    "#AskNASA​​┃ What’s Out There?", "NASA", true);
            testVideo(getVideo(playlist, "DpXxdSr1FWs", 10),
                    "#AskNASA┃ How Will Astronauts Dig on the Moon?", "NASA", true);
        });
    }

    @Test
    @DisplayName("get long playlist should be successful")
    void getLongPlaylist_Success() {
        assertDoesNotThrow(() -> {
            PlaylistInfo playlist = getPlaylist(LOTR_PLAYLIST_ID);
            testPlaylist(playlist, LOTR_PLAYLIST_ID,
                    "The Lord of the Rings Complete Recordings",
                    "Darkrunn",
                    210);    // stable
            testVideo(getVideo(playlist, "tK_bCeRcGxo", 194),
                    "Howard Shore-The Ruins of Dale", "willburowgh", true);
            testVideo(getVideo(playlist, 206),
                    "Howard Shore-Courage & Wisdom", "willburowgh", true);
            
            String author = "willburowgh";
            List<PlaylistVideoDetails> videos = playlist.findVideos(video -> video.author().equals(author));
            assertFalse(videos.isEmpty(), "filtered videos shoud not be empty");
            videos.forEach(video -> {
                assertEquals(author, video.author(), "author should be " + author);
            });
        });
    }

    @Test
    @DisplayName("get very long playlist should be successful")
    void getVeryLongPlaylist_Success() {
        assertDoesNotThrow(() -> {
            PlaylistInfo playlist = getPlaylist(ELECTRO_PLAYLIST_ID);
            testPlaylist(playlist, ELECTRO_PLAYLIST_ID,
                    "Electronic Music Playlist :D",
                    "Brent Parker",
                    -1); // > 2800 videos, unstable
        });
    }

    @Test
    @DisplayName("get live playlist should be successful")
    void getLivePlaylist() {
        assertDoesNotThrow(() -> {
            PlaylistInfo playlist = getPlaylist(LIVE_PLAYLIST_ID);
            testPlaylist(playlist, LIVE_PLAYLIST_ID, "Live", "Live", 100);
            int liveCount = 0;
            for (PlaylistVideoDetails video : playlist.videos()) {
                if (video.isLive()) {
                    liveCount ++;
                }
                assertTrue(video.isPlayable(), "live playlist video should be playable");
            }
            int minLiveCount = 90;
            assertTrue(liveCount > minLiveCount, "live playlist should contain at least " + minLiveCount + " live videos");
        });
    }

    @Test
    @DisplayName("get playlist should throw exception for unavailable playlist")
    void getPlaylist_Unavailable_ThrowsException() {
        Response<PlaylistInfo> response = downloader.getPlaylistInfo(new RequestPlaylistInfo("12345678901"));
        assertFalse(response.ok());
        assertTrue(response.error() instanceof YoutubeException.BadPageException);
    }

    @Test
    @DisplayName("get removed playlist should throw exception")
    void getPlaylist_Removed_ThrowsException() {
        Response<PlaylistInfo> response = downloader.getPlaylistInfo(new RequestPlaylistInfo(REMOVED_PLAYLIST_ID));
        assertFalse(response.ok());
        assertTrue(response.error() instanceof YoutubeException.BadPageException);
    }

    private static void testPlaylist(PlaylistInfo playlist, String playlistId, String title, String author, int size) {
        PlaylistDetails details = playlist.details();
        assertEquals(title, details.title(), "title should be " + title);
        assertEquals(author, details.author(), "author should be " + author + " but was " + details.author());
        
        List<PlaylistVideoDetails> videos = playlist.videos();
        assertNotNull(videos, "playlist videos should not be null: " + playlistId);

        for (PlaylistVideoDetails video : videos) {
            if (video.lengthSeconds() > 0 && !video.isPlayable()) {
                assertNull(video.author(), "Not playable video should not have an author");
                assertTrue(video.title().equals("[Private video]") || video.title().equals("[Deleted video]"),
                        "Not playable video has a wrong title: " + video.title());
            }
        }
    }

    private static void testVideo(PlaylistVideoDetails video, String title, String author, boolean isPlayable) {
        assertEquals(title, video.title(), "title should be " + title);
        assertEquals(author, video.author(), "author should be " + author);
        if (isPlayable) {
            assertTrue(video.isPlayable(), "video should be playable");
        } else {
            assertFalse(video.isPlayable(), "video should not be playable");
        }
    }

    private static PlaylistVideoDetails getVideo(PlaylistInfo playlist, String videoId, int index) {
        PlaylistVideoDetails video = playlist.findVideoById(videoId);
        assertNotNull(video, "findVideoById: " + videoId + " should return not null video");
        assertEquals(videoId, video.videoId(), "video id should be " + videoId);
        if (index > 0) {
            assertEquals(index, video.index(), "video index should be " + index);
        }
        return video;
    }
}
